--employee table and insert

CREATE TABLE Employee (
    EmployeeID INTEGER PRIMARY KEY AUTOINCREMENT,
    EmployeeName VARCHAR(25) NOT NULL,
    EmployeeSurname VARCHAR(25) NOT NULL,
    EmailAddress VARCHAR(25),
    Position VARCHAR(25) NOT NULL,
    PhoneNumber VARCHAR(10)
 );
 
INSERT INTO Employee (EmployeeName, EmployeeSurname, EmailAddress, Position, PhoneNumber) VALUES
('Alice', 'Smith', 'alice.smith@email.com', 'Manager', '0823456781'),
('Bob', 'Johnson', 'bob.johnson@email.com', 'Cashier', '0823456782'),
('Carol', 'Williams', 'carol.williams@email.com', 'Stock Clerk', '0823456783'),
('David', 'Brown', 'david.brown@email.com', 'Supervisor', '0823456784'),
('Emma', 'Jones', 'emma.jones@email.com', 'Manager', '0823456785'),
('Frank', 'Garcia', 'frank.garcia@email.com', 'Cashier', '0823456786'),
('Grace', 'Martinez', 'grace.martinez@email.com', 'Stock Clerk', '0823456787'),
('Henry', 'Rodriguez', 'henry.rodriguez@email.com', 'Supervisor', '0823456788'),
('Isabel', 'Lee', 'isabel.lee@email.com', 'Manager', '0823456789'),
('Jack', 'Walker', 'jack.walker@email.com', 'Cashier', '0823456790'),
('Karen', 'Hall', 'karen.hall@email.com', 'Stock Clerk', '0823456791'),
('Leo', 'Allen', 'leo.allen@email.com', 'Supervisor', '0823456792'),
('Mia', 'Young', 'mia.young@email.com', 'Manager', '0823456793'),
('Nathan', 'King', 'nathan.king@email.com', 'Cashier', '0823456794'),
('Olivia', 'Wright', 'olivia.wright@email.com', 'Stock Clerk', '0823456795'),
('Peter', 'Scott', 'peter.scott@email.com', 'Supervisor', '0823456796'),
('Quinn', 'Green', 'quinn.green@email.com', 'Manager', '0823456797'),
('Rachel', 'Adams', 'rachel.adams@email.com', 'Cashier', '0823456798'),
('Steve', 'Baker', 'steve.baker@email.com', 'Stock Clerk', '0823456799'),
('Tina', 'Nelson', 'tina.nelson@email.com', 'Supervisor', '0823456800');


--Delete Employee


DELETE FROM Employee
WHERE EmployeeID = 3;

--manager table and insert

CREATE TABLE Manager (
    ManagerID INTEGER PRIMARY KEY AUTOINCREMENT,
    EmployeeID INTEGER NOT NULL UNIQUE,
    FOREIGN KEY (EmployeeID) REFERENCES Employee(EmployeeID)
);
    

INSERT INTO Manager (EmployeeID)
SELECT EmployeeID
FROM Employee
WHERE Position = 'Manager';




CREATE TABLE EmployeeShift (
    ShiftID INTEGER PRIMARY KEY AUTOINCREMENT,
    EmployeeID INTEGER,
    ShiftDate DATE NOT NULL,
    StartTime TIME NOT NULL,
    EndTime TIME NOT NULL,
    Department VARCHAR(25)  NOT NULL CHECK (Department IN ('Food','Clothing','Home Decor')),
    FOREIGN KEY (EmployeeID) REFERENCES Employee(EmployeeID)
);

INSERT INTO EmployeeShift (EmployeeID, ShiftDate, StartTime, EndTime, Department) VALUES
(3,  '2025-08-15', '09:00', '17:00', 'Clothing'),
(4,  '2025-08-15', '08:00', '16:00', 'Home Decor'),
(6,  '2025-08-15', '09:00', '17:00', 'Home Decor'),
(8,  '2025-08-15', '09:00', '17:00', 'Clothing'),
(10, '2025-08-15', '08:00', '16:00', 'Food'),
(12, '2025-08-15', '10:00', '18:00', 'Food'),
(15, '2025-08-15', '09:00', '17:00', 'Clothing'),
(18, '2025-08-15', '08:00', '16:00', 'Home Decor'),
(19, '2025-08-15', '08:00', '16:00', 'Clothing');



--warehouse table and insert

CREATE TABLE Warehouse (
    WarehouseID INTEGER PRIMARY KEY AUTOINCREMENT,
    Name VARCHAR(25) NOT  NULL,
    Location VARCHAR(25) NOT NULL,
    PhoneNumber VARCHAR(10),
    InventoryType VARCHAR(25)CHECK (InventoryType IN ('Food','Clothing','Home Decor')),
    Capacity INTEGER NOT NULL
);

INSERT INTO Warehouse (Name, Location, PhoneNumber, InventoryType, Capacity) VALUES
('Cape Town Warehouse', 'Cape Town', '0211234567', 'Food', 500),
('Johannesburg Warehouse', 'Johannesburg', '0112345678', 'Clothing', 200),
('Durban Warehouse', 'Durban', '0312345678', 'Home Decor',700),
('Pretoria Warehouse', 'Pretoria', '0123456789', 'Food', 900),
('Port Elizabeth Warehouse', 'Port Elizabeth', '0412345678', 'Clothing', 550),
('Bloemfontein Warehouse', 'Bloemfontein', '0512345678', 'Home Decor', 150),
('Stellenbosch Warehouse', 'Stellenbosch', '0218765432', 'Food', 250),
('Pietermaritzburg Warehouse', 'Pietermaritzburg', '0331234567', 'Clothing', 350),
('Cape Town Harbor Warehouse', 'Cape Town', '0217654321', 'Home Decor', 400),
('Johannesburg Suburban Warehouse', 'Johannesburg', '0118765432', 'Food', 450
);



--Store Stock table and insert

CREATE TABLE StoreStock (
    ProductID INTEGER PRIMARY KEY AUTOINCREMENT,
    ProductName VARCHAR(25),
    ProductType VARCHAR(25)CHECK (ProductType IN ('Food','Clothing','Home Decor')),
    ProductQuantity INTEGER,
    ReorderLevel INTEGER,
    LastUpdate DATE
);


INSERT INTO StoreStock (ProductName, ProductType, ProductQuantity, ReorderLevel, LastUpdate) VALUES
('Rice', 'Food', 100, 20, DATE('now')),
('Beans', 'Food', 80, 15, DATE('now')),
('Pasta', 'Food', 60, 10, DATE('now')),
('Canned Tuna', 'Food', 50, 10, DATE('now')),
('Bread', 'Food', 40, 5, DATE('now')),
('Milk', 'Food', 70, 15, DATE('now')),
('Cheese', 'Food', 30, 5, DATE('now')),
('Tomato Sauce', 'Food', 90, 20, DATE('now')),
('Sugar', 'Food', 120, 25, DATE('now')),
('Salt', 'Food', 150, 30, DATE('now')),
('T-Shirt', 'Clothing', 100, 20, DATE('now')),
('Jeans', 'Clothing', 80, 15, DATE('now')),
('Jacket', 'Clothing', 50, 10, DATE('now')),
('Sweater', 'Clothing', 60, 10, DATE('now')),
('Shorts', 'Clothing', 70, 15, DATE('now')),
('Skirt', 'Clothing', 40, 5, DATE('now')),
('Dress', 'Clothing', 30, 5, DATE('now')),
('Socks', 'Clothing', 120, 25, DATE('now')),
('Hat', 'Clothing', 90, 20, DATE('now')),
('Scarf', 'Clothing', 50, 10, DATE('now')),
('Vase', 'Home Decor', 50, 10, DATE('now')),
('Lamp', 'Home Decor', 40, 8, DATE('now')),
('Cushion', 'Home Decor', 60, 15, DATE('now')),
('Wall Art', 'Home Decor', 30, 5, DATE('now')),
('Curtains', 'Home Decor', 25, 5, DATE('now')),
('Rug', 'Home Decor', 20, 5, DATE('now')),
('Mirror', 'Home Decor', 15, 5, DATE('now')),
('Clock', 'Home Decor', 35, 10, DATE('now')),
('Picture Frame', 'Home Decor', 70, 20, DATE('now')),
('Candles', 'Home Decor', 100, 25, DATE('now'));


--Update StoreStock


UPDATE StoreStock
SET ProductQuantity = ProductQuantity - 35
WHERE ProductID = 5;



--Orders table and trigger for autogenerated inserts


CREATE TABLE Orders (
    OrderID        INTEGER PRIMARY KEY AUTOINCREMENT,
    WarehouseID    INTEGER NOT NULL,
    ManagerID      INTEGER NOT NULL,
    StockType      VARCHAR(25) NOT NULL CHECK (StockType IN ('Food','Clothing','Home Decor')),
    OrderDate      DATE NOT NULL DEFAULT (DATE('now')),
    ExpectedArrival DATE,
    DeliveryStatus VARCHAR(10) NOT NULL DEFAULT 'Pending',
    FOREIGN KEY (WarehouseID) REFERENCES Warehouse(WarehouseID),
    FOREIGN KEY (ManagerID)   REFERENCES Manager(ManagerID)
);
    

CREATE TRIGGER AutoGenerateOrder
AFTER UPDATE OF ProductQuantity ON StoreStock
FOR EACH ROW
WHEN NEW.ProductQuantity <= NEW.ReorderLevel
BEGIN
    INSERT INTO Orders (WarehouseID, ManagerID, StockType, ExpectedArrival)
    VALUES ((SELECT WarehouseID FROM Warehouse WHERE InventoryType = NEW.ProductType ORDER BY Capacity - (SELECT SUM(ProductQuantity) FROM StoreStock WHERE ProductType = NEW.ProductType) ASC LIMIT 1),
        (SELECT m.ManagerID FROM Manager m
         JOIN Employee e ON m.EmployeeID = e.EmployeeID
         JOIN Warehouse w ON w.InventoryType = NEW.ProductType
         LIMIT 1),
        NEW.ProductType,
        DATE('now', '+7 days')
    );
END;


--Food table and insert


CREATE TABLE FoodStock (
    FoodID INTEGER PRIMARY KEY AUTOINCREMENT,
    FoodName VARCHAR(25),
    Quantity INTEGER,
    Price DECIMAL(8,2),
    ProductID INTEGER,
    SellBy DATE,
    FOREIGN KEY (ProductID) REFERENCES StoreStock(ProductID)
);

INSERT INTO FoodStock (FoodName, Quantity, Price, ProductID, SellBy) VALUES
('Rice', 100, 50.00, 1, DATE('2025-12-31')),
('Beans', 80, 40.00, 2, DATE('2025-11-30')),
('Pasta', 60, 35.00, 3, DATE('2025-10-15')),
('Canned Tuna', 50, 25.00, 4, DATE('2026-01-31')),
('Bread', 40, 20.00, 5, DATE('2025-08-20')),
('Milk', 70, 30.00, 6, DATE('2025-08-25')),
('Cheese', 30, 45.00, 7, DATE('2025-12-15')),
('Tomato Sauce', 90, 15.00, 8, DATE('2026-02-28')),
('Sugar', 120, 10.00, 9, DATE('2026-03-31')),
('Salt', 150, 8.00, 10, DATE('2026-04-30'));



--Clothing table and insert

CREATE TABLE ClothingStock (
    ClothingID INTEGER PRIMARY KEY AUTOINCREMENT,
    ClothingName VARCHAR(25),
    Size VARCHAR(25),
    Colour VARCHAR(25),
    Quantity INTEGER,
    Price DECIMAL(8,2),
    ProductID INTEGER,
    FOREIGN KEY (ProductID) REFERENCES StoreStock(ProductID)
);


INSERT INTO ClothingStock (ClothingName, Size, Colour, Quantity, Price, ProductID) VALUES
('T-Shirt', 'M', 'Red', 100, 150.00, 11),
('Jeans', 'L', 'Blue', 80, 350.00, 12),
('Jacket', 'XL', 'Black', 50, 500.00, 13),
('Sweater', 'M', 'Grey', 60, 400.00, 14),
('Shorts', 'S', 'Green', 70, 200.00, 15),
('Skirt', 'M', 'Pink', 40, 250.00, 16),
('Dress', 'L', 'Blue', 30, 450.00, 17),
('Socks', 'One Size', 'White', 120, 50.00, 18),
('Hat', 'One Size', 'Black', 90, 120.00, 19),
('Scarf', 'One Size', 'Red', 50, 100.00, 20);


--Home decor table and insert

CREATE TABLE HomeDecoStock (
    DecorID INTEGER PRIMARY KEY AUTOINCREMENT,
    DecorName VARCHAR(25),
    Material VARCHAR(25),
    Quantity INTEGER,
    Price DECIMAL(8,2),
    ProductID INTEGER,
    FOREIGN KEY (ProductID) REFERENCES StoreStock(ProductID)
);

INSERT INTO HomeDecoStock (DecorName, Material, Quantity, Price, ProductID) VALUES
('Vase', 'Ceramic', 50, 250.00, 21),
('Lamp', 'Metal', 40, 450.00, 22),
('Cushion', 'Cotton', 60, 150.00, 23),
('Wall Art', 'Canvas', 30, 500.00, 24),
('Curtains', 'Polyester', 25, 300.00, 25),
('Rug', 'Wool', 20, 600.00, 26),
('Mirror', 'Glass', 15, 400.00, 27),
('Clock', 'Wood', 35, 200.00, 28),
('Picture Frame', 'Wood', 70, 120.00, 29),
('Candles', 'Wax', 100, 80.00, 30);



--customer table and insert


CREATE TABLE Customer (
    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,
    CustomerName        VARCHAR(25) NOT NULL,
    CustomerSurname     VARCHAR(25) NOT NULL,
    EmailAddress VARCHAR(50),
    PhoneNumber  VARCHAR(15)
);

INSERT INTO Customer (CustomerName, CustomerSurname, EmailAddress, PhoneNumber) VALUES
('Alice', 'Smith', 'alice.smith@email.com', '0823456789'),
('Bob', 'Johnson', 'bob.johnson@email.com', '0834567890'),
('Carol', 'Williams', 'carol.williams@email.com', '0845678901'),
('David', 'Brown', 'david.brown@email.com', '0856789012'),
('Emma', 'Jones', 'emma.jones@email.com', '0867890123'),
('Frank', 'Garcia', 'frank.garcia@email.com', '0878901234'),
('Grace', 'Martinez', 'grace.martinez@email.com', '0889012345'),
('Henry', 'Rodriguez', 'henry.rodriguez@email.com', '0890123456'),
('Isabel', 'Lee', 'isabel.lee@email.com', '0812345678'),
('Jack', 'Walker', 'jack.walker@email.com', '0823456780');

--Sales table and insert

CREATE TABLE SalesTransactions (
    SaleID INTEGER PRIMARY KEY AUTOINCREMENT,
    CustomerID INTEGER NOT NULL,
    EmployeeID INTEGER NOT NULL,
    ProductID INTEGER NOT NULL,
    QuantitySold INTEGER NOT NULL,
    SaleDate DATE NOT NULL,
    TotalAmount DECIMAL(10,2) NOT NULL,
    PaymentMethod VARCHAR(25) NOT NULL CHECK (PaymentMethod IN ('EFT','Card','Cash')),
    FOREIGN KEY (CustomerID) REFERENCES Customer(CustomerID),
    FOREIGN KEY (EmployeeID) REFERENCES Employee(EmployeeID),
    FOREIGN KEY (ProductID) REFERENCES StoreStock(ProductID)
);


INSERT INTO SalesTransactions (CustomerID, EmployeeID, ProductID, QuantitySold, SaleDate, TotalAmount, PaymentMethod) VALUES
(2, 5, 11, 2, '2025-08-01', 300.00, 'Card'),
(7, 12, 2, 1, '2025-08-03', 40.00, 'Cash'),
(1, 3, 13, 1, '2025-08-04', 500.00, 'EFT'),
(5, 8, 6, 5, '2025-08-05', 150.00, 'Card'),
(9, 15, 17, 2, '2025-08-06', 900.00, 'Card'),
(3, 10, 22, 1, '2025-08-07', 450.00, 'Cash'),
(6, 17, 9, 3, '2025-08-08', 30.00, 'EFT'),
(8, 19, 14, 2, '2025-08-09', 800.00, 'Card'),
(4, 2, 5, 4, '2025-08-10', 80.00, 'Cash'),
(10, 6, 21, 1, '2025-08-11', 250.00, 'Card');


--views


CREATE VIEW StoreInventoryView AS
SELECT 
    ProductID,
    ProductName,
    ProductType,
    ProductQuantity,
    ReorderLevel,
    CASE 
        WHEN ProductQuantity <= ReorderLevel THEN 'Yes'
        ELSE 'No'
    END AS NeedsRestock,
    LastUpdate
FROM StoreStock;



CREATE VIEW EmployeeShiftsView AS
SELECT 
    e.EmployeeID,
    e.EmployeeName,
    e.EmployeeSurname,
    es.ShiftDate,
    es.StartTime,
    es.EndTime,
    es.Department
FROM Employee e
JOIN EmployeeShift es ON e.EmployeeID = es.EmployeeID
ORDER BY es.ShiftDate, es.StartTime;



CREATE VIEW ManagersWarehousesView AS
SELECT 
    m.ManagerID,
    e.EmployeeName,
    e.EmployeeSurname,
    e.EmailAddress,
    w.WarehouseID,
    w.Name AS WarehouseName,
    w.InventoryType
FROM Manager m
JOIN Employee e ON m.EmployeeID = e.EmployeeID
JOIN Warehouse w ON w.InventoryType IN ('Food','Clothing','Home Decor');



--Siddeeqs work


-- Customer View


CREATE VIEW CustomerView AS
SELECT 
    CustomerID,
    CustomerName || ' ' || CustomerSurname AS FullName,
    EmailAddress,
    PhoneNumber
FROM Customer;


--  Employee View


CREATE VIEW EmployeeView AS
SELECT 
    EmployeeID,
    EmployeeName || ' ' || EmployeeSurname AS FullName,
    Position,
    EmailAddress,
    PhoneNumber
FROM Employee;


-- Sales Transactions View

CREATE VIEW SalesTransactionsView AS
SELECT 
    s.SaleID,
    c.CustomerName || ' ' || c.CustomerSurname AS CustomerName,
    e.EmployeeName || ' ' || e.EmployeeSurname AS EmployeeName,
    ss.ProductName,
    s.QuantitySold,
    s.TotalAmount,
    s.SaleDate,
    s.PaymentMethod
FROM SalesTransactions s
JOIN Customer c ON s.CustomerID = c.CustomerID
JOIN Employee e ON s.EmployeeID = e.EmployeeID
JOIN StoreStock ss ON s.ProductID = ss.ProductID;


--  Food Stock View


CREATE VIEW FoodStockView AS
SELECT 
    FoodID,
    FoodName,
    SellBy,
    Quantity AS ProductQuantity
FROM FoodStock;


--  Clothing Stock View


CREATE VIEW ClothingStockView AS
SELECT 
    ClothingID,
    ClothingName,
    Size,
    Quantity AS ProductQuantity
FROM ClothingStock;


-- Home Decoration Stock View


CREATE VIEW HomeDecorStockView AS
SELECT 
    DecorID,
    DecorName,
    Material,
    Quantity AS ProductQuantity
FROM HomeDecoStock;


-- 12j. Orders View


CREATE VIEW OrdersView AS
SELECT 
     OrderID,
    WarehouseID,
    ManagerID,
    StockType,
    OrderDate,
    ExpectedArrival
FROM Orders;



--  DISPLAY ALL TEN TABLES CONTENT (with sorting)


SELECT * FROM Employee ORDER BY EmployeeName;
SELECT * FROM Manager ORDER BY ManagerID;
SELECT * FROM EmployeeShift ORDER BY ShiftDate;
SELECT * FROM Warehouse ORDER BY Capacity DESC;
SELECT * FROM StoreStock ORDER BY ProductName;
SELECT * FROM Orders ORDER BY OrderDate DESC;
SELECT * FROM FoodStock ORDER BY SellBy;
SELECT * FROM ClothingStock ORDER BY ClothingName;
SELECT * FROM HomeDecoStock ORDER BY DecorName;
SELECT * FROM Customer ORDER BY CustomerName;
SELECT * FROM SalesTransactions ORDER BY SaleDate;


--  GROUPING & AGGREGATION

-- Total sales per customer


SELECT c.CustomerName, SUM(s.TotalAmount) AS TotalSpent
FROM SalesTransactions s
JOIN Customer c ON s.CustomerID = c.CustomerID
GROUP BY c.CustomerName
HAVING SUM(s.TotalAmount) > 50;


--  JOINS (Inner + Outer)

-- INNER JOIN: Employees and their shifts


SELECT e.EmployeeName, s.ShiftDate, s.StartTime, s.EndTime
FROM Employee e
INNER JOIN EmployeeShift s ON e.EmployeeID = s.EmployeeID;


-- LEFT JOIN: Orders and matching StoreStock items


SELECT o.OrderID, o.StockType, ss.ProductName, ss.ProductQuantity
FROM Orders o
LEFT JOIN StoreStock ss ON o.StockType = ss.ProductType;



--  SUBQUERIES

-- Find employees who are also managers


SELECT EmployeeName, EmployeeSurname
FROM Employee
WHERE EmployeeID IN (SELECT EmployeeID FROM Manager);


-- Customers who spent above the average
SELECT c.CustomerName, c.CustomerSurname
FROM Customer c
WHERE EXISTS (
    SELECT 1
    FROM SalesTransactions s
    WHERE s.CustomerID = c.CustomerID
    AND s.TotalAmount > (SELECT AVG(TotalAmount) FROM SalesTransactions)
);


-- FUNCTIONS

-- Date/Time

SELECT julianday('now') - julianday(ShiftDate) AS DaysAgo
FROM EmployeeShift;

-- String


SELECT UPPER(EmployeeName) AS UpperName, LENGTH(EmployeeSurname) AS NameLength
FROM Employee;


-- Numeric


SELECT ROUND(AVG(TotalAmount), 2) AS AvgSale
FROM SalesTransactions;


-- Conversion (cast)

SELECT CustomerID, CAST(PhoneNumber AS TEXT) AS PhoneText
FROM Customer;


--  UNION

-- Union of all product names from different stock tables


SELECT ProductName FROM StoreStock
UNION
SELECT FoodName FROM FoodStock
UNION
SELECT ClothingName FROM ClothingStock
UNION
SELECT DecorName FROM HomeDecoStock;


--  TRIGGER

-- Automatically update StoreStock quantity when a Sale occurs

CREATE TRIGGER IF NOT EXISTS UpdateStockAfterSale
AFTER INSERT ON SalesTransactions
BEGIN
    UPDATE StoreStock
    SET ProductQuantity = ProductQuantity - NEW.QuantitySold
    WHERE ProductID = NEW.ProductID;
END;

